#!/usr/bin/python3
#+
# Test of trying to parse the contents of .blend files created by
# Blender <http://www.blender.org/>. Invoke this script as follows:
#
#     blendparse blendfile [outfile]
#
# where blendfile is the name of a .blend file to analyze, and outfile
# is an optional output .blend file to try creating.
# The output of the script will be a dump of the decoded file contents.
#
# Copyright 2012 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#-

import sys
import struct
import blendfile

#+
# Mainline
#-

if len(sys.argv) not in (2, 3) :
    raise RuntimeError("usage: %s blendfile [outfile]" % sys.argv[0])
#end if
log = sys.stdout
blend = blendfile.Blenddata().load(sys.argv[1], keep_rawdata = True, count_refs = True, log = log)
for i, block in enumerate(blend.blocks) :
    log.write("block %d(%s)[%s] : %s[%d]\n" % (i, repr(block["code"]), len(block["rawdata"]), block["type"]["name"], block["dna_count"])) # debug
    if block.get("refs") == 0 :
        log.write(" - no refs to this block\n")
    #end if
    for item in block["data"] :
        log.write(" => " + repr(item) + "\n")
    #end for
#end for
if len(sys.argv) > 2 :
    outfile = open(sys.argv[2], "wb")
    outfile.write(blendfile.blender_sig + {4 : b"_", 8 : b"-"}[blend.ptrsize] + {False : b"v", True : b"V"}[blend.big_endian] + b"001")
    sdna = blend.encode_sdna()
    outfile.write(struct.pack("%s4sI%sII" % (blend.endian, blend.ptrcode), b"DNA1", len(sdna), 1, 0, 1) + sdna)
    outfile.write(struct.pack("%s4sI%sII" % (blend.endian, blend.ptrcode), b"ENDB", 0, 1, 0, 1) + sdna)
    outfile.flush()
    outfile.close()
#end if
