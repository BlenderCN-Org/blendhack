#!/usr/bin/python3
#+
# Test of trying to parse the contents of .blend files.
#
# Created by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import os
import struct

#+
# Useful stuff
#-

def structread(fromfile, decode_struct) :
    """reads sufficient bytes from fromfile to be unpacked according to
    decode_struct, and returns the unpacked results."""
    return struct.unpack(decode_struct, fromfile.read(struct.calcsize(decode_struct)))
#end structread

#+
# Mainline
#-

if len(sys.argv) != 2 :
    raise RuntimeError("need one arg, the name of the .blend file to parse")
#end if
fd = open(sys.argv[1], "rb")
sig, ptrcode, endiancode, version = structread(fd, "7s1s1s3s")
assert sig == b"BLENDER", "unrecognized file header signature %s" % sig
ptrsize = {b"_" : 4, b"-" : 8}[ptrcode]
ptrcode = {b"_" : "L", b"-" : "Q"}[ptrcode]
endian = {b"v" : "<", b"V" : ">"}[endiancode]
blocks = []
while True :
    blockcode, datasize, oldaddr, dna_index, dna_count = \
        structread(fd, "%s4sI%sII" % (endian, ptrcode))
    sys.stdout.write("blockcode = %s, datasize = %d, oldattr = %x, dna_index = %d, dna_count = %d\n" % (blockcode, datasize, oldaddr, dna_index, dna_count)) # debug
    if blockcode == b"DNA1" :
        sdna_data = fd.read(datasize)
        sdna_id = sdna_data[:4]
        assert sdna_id == b"SDNA", "invalid DNA block header"
        sdna_data = sdna_data[4:]
        names = {}
        types = {}
        data_offset = 4
        for \
            expect_id, collect \
        in \
            (
                (b"NAME", names),
                (b"TYPE", types),
            ) \
        :
            assert len(sdna_data) >= 8, "premature end of DNA block"
            assert expect_id == sdna_data[:4], "expecting %s sub-block in DNA block" % expect_id
            nr_names = struct.unpack(endian + "I", sdna_data[4:8])[0]
            sdna_data = sdna_data[8:]
            data_offset += 8
            for i in range(0, nr_names) :
                str_end = sdna_data.index(b"\0")
                collect[i] = sdna_data[:str_end]
                sys.stdout.write("name[%d] = %s\n" % (i, repr(collect[i]))) # debug
                data_offset += str_end + 1
                sdna_data = sdna_data[str_end + 1:]
            #end for
            if data_offset % 4 != 0 :
                sdna_data = sdna_data[4 - data_offset % 4:]
                data_offset += 4 - data_offset % 4
            #end if
        #end for
        for k in types :
            types[k] = {"name" : types[k]}
        #end for
        assert sdna_data[:4] == b"TLEN", "expecting TLEN sub-block in DNA block"
        sdna_data = sdna_data[4:]
        data_offset += 4
        for i, s in enumerate(struct.unpack(endian + "H" * len(types), sdna_data[:2 * len(types)])) :
            types[i]["size"] = s
            sys.stdout.write("sizeof(%s) = %d\n" % (types[i]["name"], types[i]["size"])) # debug
        #end for
        sdna_data = sdna_data[2 * len(types):]
        data_offset += 2 * len(types)
        if data_offset % 4 != 0 :
            sdna_data = sdna_data[4 - data_offset % 4:]
            data_offset += 4 - data_offset % 4
        #end if
        assert sdna_data[:4] == b"STRC", "expecting STRC sub-block in DNA block"
        nr_structs = struct.unpack(endian + "I", sdna_data[4:8])[0]
        sdna_data = sdna_data[8:]
        data_offset += 8
        for i in range(0, nr_structs) :
            struct_type, nr_fields = struct.unpack(endian + "HH", sdna_data[:4])
            sdna_data = sdna_data[4:]
            fields = []
            for i, f in enumerate(struct.unpack(endian + "HH" * nr_fields, sdna_data[:4 * nr_fields])) :
                if i % 2 == 0 :
                    field_type = f
                else :
                    field_name = f
                    fields.append({"type" : types[field_type], "name" : names[field_name]})
                    sys.stdout.write("%s.%s : %s\n" % (types[struct_type]["name"], names[field_name], types[field_type]["name"])) # debug
                #end if
            #end for
            types[struct_type]["fields"] = fields
            sdna_data = sdna_data[4 * nr_fields:]
        #end for
    elif blockcode == b"ENDB" :
        break
    else :
        blocks.append \
          (
            {
                "code" : blockcode,
                "oldaddr" : oldaddr,
                "dna_index" : dna_index,
                "dna_count" : dna_count,
                "data" : fd.read(datasize),
            }
          )
    #end if
#end while
fd.close()
# more TBD
